import numpy as np

# 5. Изменение формы массивов, добавление и удаление осей

# Например есть однородный массив, состоящий из 10 чисел
#          .shape - свойство для изменения формы массива достаточно присвоить кортеж,
#                   получится двумерный массив 2 * 5

m = np.arange(10)
print(m)
# [0 1 2 3 4 5 6 7 8 9]

m.shape = 2, 5
print(m)
# [[0 1 2 3 4]
#  [5 6 7 8 9]]

# reshape() - функция изменит, то что возвратит и изменит размерность массива m
#             на новое представление будет ссылаться переменная m,
#             при этом массив m никак не изменится (остался двумерным)
m1 = m.reshape(10)
print(m1)
# [0 1 2 3 4 5 6 7 8 9]
print('m',m)
# m [[0 1 2 3 4]
#  [5 6 7 8 9]]

# массив m1 изменил, и при этом поменялся и массив m
m1[0] = -1
print(m1)
# [-1  1  2  3  4  5  6  7  8  9]
print(m)
# [[-1  1  2  3  4]
#  [ 5  6  7  8  9]]

# методы reshape(), shape() - работают с полным набором данных
# reshape() - если изменим размер с 10 элементов на 9 элементов будет error
# m1 = m.reshape(9)
#             ValueError: cannot reshape array of size 10 into shape (9,)
# m.shape = 3, 3
#             ValueError: cannot reshape array of size 10 into shape (3,3)
#         кортеж чисел должен описывать все 10 элементов, в данном случае описывается 9 элементов

# Использование отрицательных чисел для получения массива
# -1 -  говорит о том, что пусть здесь будет столько элементов, сколько останется,
#       при этом колличество столбцов будет равно 2, т.к. у нас 10 элементов
#       мы получим 5 строк и 2 столбца
m.shape = -1, 2
print(m)
# [[-1  1]
#  [ 2  3]
#  [ 4  5]
#  [ 6  7]
#  [ 8  9]]

# можем не ставить конкретную размерность, ставим -1, размерность будет автоматически вычислятся
m.shape = -1, 5
print(m)
# [[-1  1  2  3  4]
#  [ 5  6  7  8  9]]

# вектор столбец, как двумерная матрица, имеет 10 строк и 1 столбец
print(m1.reshape(-1, 1))
# [[-1]
#  [ 1]
#  [ 2]
#  [ 3]
#  [ 4]
#  [ 5]
#  [ 6]
#  [ 7]
#  [ 8]
#  [ 9]]

# [[ двумерная матрица  ]] - с одной строкой и 10 столбцами, матрица имеет две оси axis 0, axis 1
print(m1.reshape(1, -1))
# [[-1  1  2  3  4  5  6  7  8  9]]
# [ одномерный массив ] - вектор который имеет одну ось axis 0
print(m1)
# [-1  1  2  3  4  5  6  7  8  9]

# Например нужно преобразовать многомерный массив в одномерный используем метод revel()
#          после преобразования revel() массив вытягивается в одну строку-вектор
print('m: ', m)
# m:  [[-1  1  2  3  4]
#  [ 5  6  7  8  9]]
print('m: ', m.ravel())
# m:  [-1  1  2  3  4  5  6  7  8  9]

# Сохраним представление массива в переменную - r
# при этом представление массива m остается неизменное
r = m.ravel()
print(r)
# [-1  1  2  3  4  5  6  7  8  9]

# Если нужно изменит массив m , чтоб он стал одномерным, если m вывести, то он представляется как один внектор
# -1 - указали одну ось, по ней должно располагаться столько элементов, сколько есть в массиве m
#      элементы выстраиваются по порядку в виде вектора
m.shape = -1
print(m)
# [-1  1  2  3  4  5  6  7  8  9]

# resize() - метод для операции с текущим массивом, меняет представление текущего массива
#            None - ничего не возвращает другая переменная которая ссылается на resize()
m3 = np.arange(10)
print(m3)
# [0 1 2 3 4 5 6 7 8 9]
m4 = m3.resize(2, 5)
print(m3, m4)
# [[0 1 2 3 4]
#  [5 6 7 8 9]] None


# ValueError: cannot resize an array that references or is referenced
# by another array in this way.
# Use the np.resize function or refcheck=False
# print(m.resize(3, 3))
# Ошибка, если неверно указан массив размер resize(3,3)
# Теперь массив m имееь 9 элементов и размерность 3х3, метод меняет не только форму, но и число элементов
# число элементов можно уменьшать, но также можно и увеличивать
m.resize(3, 3, refcheck=False)
print(m)
# [[-1  1  2]
#  [ 3  4  5]
#  [ 6  7  8]]
# увиличим число элементов? стало 20 элементов, где новые элементы проинициализированы 0
m.resize(4, 5, refcheck=False)
print(m)
# [[-1  1  2  3  4]
#  [ 5  6  7  8  0]
#  [ 0  0  0  0  0]
#  [ 0  0  0  0  0]]

# Транспонирование матриц и векторов, заменять строки на столбцы
# переменная t составлена из столбцов матрицы m, были единицы по вертикали, стали единицы по горизонтали
# операция транспонирования создает лишь новое представление, новый массив не создается
m5 = np.array([(1, 2, 3), (1, 4, 9), (1, 8, 27)])
print(m5)
# [[ 1  2  3]
#  [ 1  4  9]
#  [ 1  8 27]]
m6 = m5.T
print(m6)
# [[ 1  1  1]
#  [ 2  4  8]
#  [ 3  9 27]]

# Например применим операцию транспонирования к вектору
# на выходе вектор не изменился, т.к. всего одна ось axis 0, второй оси нет, нечем заменять строки на столбцы
# чтоб можно было применить операцию транспонирования к вектору, нужно добавить еще одну ось
x = np.arange(1, 10)
print(x)
# [1 2 3 4 5 6 7 8 9]
print(x.T)
# [1 2 3 4 5 6 7 8 9]
# добавим еще одну ось к вектору x
x.shape = 1, -1
print(x.T)
# [[1]
#  [2]
#  [3]
#  [4]
#  [5]
#  [6]
#  [7]
#  [8]
#  [9]]


# Часто нужно добавлять новые оси или удалять существующие оси, это выполнимо спомощью функций
# np.expand_dims(a, axis) – добавление новой оси;
# np.squeeze(a[, axis]) – удаление оси (без удаления элементов)

# Например имеется некий многомерный массив размером 8x2x2, генерируем 32 значения,
# представляем 32 значения сразу в виде .reshape(8, 2, 2)
# требуется добавить еще одно измерение (ось), причем, в самое начало, то есть, ось axis0.
# Сейчас на этой оси 8 элементов – матриц 2x2, но мы хотим сделать четырехмерный массив,
# сохранив остальные три оси и их данные без изменений. Выполним с помощью функции expand_dims
m7 = np.arange(32).reshape(8, 2, 2)
print(m7)
# [[[ 0  1]
#   [ 2  3]]
#  [[ 4  5]
#   [ 6  7]]
#  [[ 8  9]
#   [10 11]]
#  [[12 13]
#   [14 15]]
#  [[16 17]
#   [18 19]]
#  [[20 21]
#   [22 23]]
#  [[24 25]
#   [26 27]]
#  [[28 29]
#   [30 31]]]
# если выполним операцию x.shape, то будет кортеж из осей (8, 2, 2) - 8 элементов по первой оси, 2 - по второй, 2 - по третей оси
print(m7.shape)
# (8, 2, 2)
# добавляем ось expand_dims()мы говорим, что будем расширять массив m7, добавлять к нему новую ось,
# вторым параметром говорим какую ось хотим добавить axis=0 - так добавляем первую ось, индекс 0
# m8 - переменная будет ссылаться на новый массив с 4 осями, добавилась новая ось 1, у которой
# один элемент - это трехмерная матрица 8, 2, 2, теперь массив m8 содержит четыре размерности, т.е.
# 4 пространственных оси
m8 = np.expand_dims(m7, axis=0)
print(m8.shape)
# (1, 8, 2, 2)

# Вопрос - что создала функция expend_dims(), новый массив или новое представление того же самого массива
#          обратимся к массиву m8  и укажем индекс все [0, 0, 0, 0], присвоим новое значение -100
#          теперь проверим массив m8 будет содержать число -100
#          -100 - первым элементом появилось, значит expand_dims() создает представление массива добавляя новую ось
#          копирование данных сдесь не происходит
m8[0, 0, 0, 0] = -100
print(m8)
# [[[[-100    1]
#    [   2    3]]
#      ...   ...

# append() - функция добавления нового элемента к существующему массиву
# добавим новый элемент на первую ось, по первой оси он содержит один элемент, в первую ось добавим еще один элемент
# для этого воспользуемся функцией append(), которая добавляет новый элемент, должен быть четырехмерный
# добавим тот же массив m8 к первой оси. Первая ось уже будет содержать два элемента
m9 = np.append(m8, m8, axis=0)
print(m9.shape)
# (2, 8, 2, 2)

# delete() - удаляет указанный элемент, 0 - это индекс удаляемого элемента, axis=0 - по какой оси будет удаляться элемент
d = np.delete(m9, 0, axis=0)
print(d.shape)
# (1, 8, 2, 2)

# Например у нас есть многомерный массив и мы хотим у него добавить последнюю ось
# axis=-1 - будет добавляться последняя ось в конец, это 1. -2 - это добавится предпоследняя ось
m10 = np.expand_dims(m8, axis=-1)
print(m10.shape)
# (1, 8, 2, 2, 1)

# squeeze() - функция удаляет те оси у которых 1 элемент. Осталось только три оси
s = np.squeeze(m10)
print(s.shape)
# (8, 2, 2)

# # squeeze() - axis - удаляет строго определенную ось. Удалилась только первая ось
# s1 = np.squeeze(m10, axis=1)
# print(s1.shape)
# (8, 2, 2, 1)

# ValueError: cannot select an axis to squeeze out which has size not equal to one
# s1  = np.squeeze(m10, axis=1) - вторую ось которая содержит 8 элементов удалить нельзя
#                                 удалять можно только оси с 1 элементом

# Объект newaxis
# В NumPy добавлять новые оси удобно с помощью специального объекта np.newaxis.
# Например, пусть у нас есть одномерный массив. Там где записан newaxis - будет добавлена новая ось,
# все остальные данные в второй ост располагаются без изменений в виде строки
# на выходе будет представляться в виде двумерной матрицы
m11 = np.arange(1, 10)
print(m11, )
# [1 2 3 4 5 6 7 8 9]
n = m11[np.newaxis, :]
# добавление оси axis0
print(n.shape)
# (1, 9)
print(n)
# [[1 2 3 4 5 6 7 8 9]]
# укажем newaxis вторым параметром, тогда элементы будут располагаться как столбцы, т.е. построчная запись
n1 = m11[:, np.newaxis]
print(n1)
# [[1]
#  [2]
#  [3]
#  [4]
#  [5]
#  [6]
#  [7]
#  [8]
#  [9]]

# можно прописать, т.е. добавить сразу две оси
# добавляем np.newaxis - первую ось, : - данные, np.newaxis - вторую ось
# теперь массив m11 представляет трехмерную матрицу
# m12 = np.arange(1, 10)
c = m11[np.newaxis, :, np.newaxis]
print('n2: ', c)
# n2:  [[[1]
#   [2]
#   [3]
#   [4]
#   [5]
#   [6]
#   [7]
#   [8]
#   [9]]]
print('n2: ', c.shape)
# n2:  (1, 9, 1)