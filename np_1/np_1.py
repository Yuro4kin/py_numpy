import numpy as np

# 1. Фундаментальный элемент NumPy – массив (array)

# В NumPy элементы массива имеют единый тип данных.
# Их индексы описываются кортежем целых неотрицательных чисел ( 0, 1 )
#                                                               |  |
#                                               оси массива axis0 axis1
#          0 1 2 3 4 axis1
#    a     ------- >
#    x   |0
#    i   |1
#    s   |2
#    0   |3
#        |4
#
#
#   axis 0 - это индекс по первой оси y - индексы строк
#   axis 1 - это индексы по второй оси х - индексы столбцов
#            на пересечении получаем элемент двумерного массива
#   Размерность кортежа – это ранг массива (то есть, размерность массива),
#                         каждое число в кортеже представляет свою отдельную ось.
#                         В нашем примере размерность равна 2.

#   Как создать массив в NumPy? Существует много способов, но базовый реализуется через функцию array():
#   numpy.array(object, dtype=None, …)
#   object -  может выступать список или кортеж,
#             а также функция или объект, возвращающий список или кортеж
#   dtype – это тип элементов массива. Если он не указан, то рпределяется автоматически по набору переданных данных.
#           Или мы можем его указать и тогда все элементы массива принимают указанный тип.
#           Если указано значение None, то тип будет определяться автоматически на основе переданных данных.
#           Официальная документация: https://numpy.org/doc/stable/reference/arrays.ndarray.html

#   Создадим одномерный массив так, вызываем функцию array и передаем список и далее
#   список уже будет преобразован в массив array пакета numpy. Тип будет array, который содержит элементы 1, 2, 3, 4
a = np.array([1, 2, 3, 4])
print(type(a))
print(a)
# <class 'numpy.ndarray'>
# [1 2 3 4]
# >>> a
# array([1, 2, 3, 4])
# Проверим тип элементов .dtype, int32 - целочисленные элементы размерностью в 32 бита.
# При создании массива автоматически применился тип данных целочисленный размерностью в 32 бита
print(a.dtype)
# int32

# Например, попробуем создать массив из разнородных элементов. Как будут представляться данные?
# Все элементы преобразуются в строки. Смешение типов в рамках одного массива не допускается.
# Все элементы должны быть строго определенного типа
# В данном случае все приведено
a1 = np.array([1, 2, '3', True])
print(a1)
# ['1' '2' '3' 'True']

# Как можно обращаться к отдельным элементам этого массива <имя массива>[<кортеж индексов>]
# если это одномерный массив, то просто число какое-то, набор индексов по каждой из осей
# 0 - это индекс первого элемента
print(a1[0])
print(a1[1])
# Например присвоим второму элементу значение '123'
# Второй элемент изменится с '2' на '123'
# Так выполняется запись в массив
a1[1] = '123'
print(a1)
# ['1' '123' '3' 'True']

# Например запишем число в массив a1, который является строковым
a1[1] = '234'
print(a1)
# ['1' '234' '3' 'True']

# Например определим одномерный массив с числами от 1 до 9
a2 = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])
# Индексы можно прописать в следующем виде, берется список в котором указываются все 1, на выходе получается массив из 2
# индекс второго элемента есть 2, и он сформировал на выходе массив, состоящий из всех 2
# выполняется подстановка списка из всех индексов 1 значения 2 и получается новый массив, который состоит из всех 2
list_a2 = a2[[1, 1, 1, 1, 1, 1, 1, 1, 1]]
print(list_a2)
# [2 2 2 2 2 2 2 2 2]

# Гибкое индексирование
# Например, чтоб на выходе получить массив из всех 2, но состоящий из 5 элементов
list_a5 = a2[[1, 1, 1, 1, 1]]
print(list_a5)
# [2 2 2 2 2]

# В качестве списка, который будет возвращать такая конструкция напишем булевые значения True, False
# остаются элементы со значениями True и отбрасываются элементы со значениями False
list_3 = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])
new_array = list_3[[True, True, False, False, False, False, True, True, True]]
print(new_array)
# >>> a = np.array([1,2,3,4,5,6,7,8,9])
# >>> a[ [True, True, False, False, False, False, True, True, True] ]
# array([1, 2, 7, 8, 9])

# Например нам нужно представить одномерный массив в виде матрицы размерностью 3х3
# reshape() - в функцию передадим размерность по каждой из координат (3, 3) и получается массив размерностью 3х3
# получится двумерный массив состоящий из элементов массива list_3
b = list_3.reshape(3, 3)
print(b)
# [[1 2 3]
#  [4 5 6]
#  [7 8 9]]

# обращение к элементам двумерного массива
read_element = b[1][2]
print(read_element)
read_element = b[2,1]
print(read_element)
# 6
# 8

#             index
#   0 1 2
# [[1 2 3]   0
#  [4 5 6]   1
#  [7 8 9]]  2
